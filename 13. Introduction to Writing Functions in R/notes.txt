
Functions in R return the last value that is calculated in their body.


NULL deafualt argument to function means function will do some special handling of this argument.

The term for converting a numeric variable into a categorical variable is called cutting.

cut_by_quantile() converts a numeric vector into a categorical variable where quantiles define the cut points. 

This is a useful function, but at the moment you have to specify five arguments to make it work.


Reasons for returning values early before function end :  1. We already know answer before completing all the calculations
                                                          2. Input is edge case i.e. weird but not weird enough to throw an error

You can prevent the return value from being printed by wrapping it in a call to invisible.

When the main purpose of a function is to generate output, like drawing a plot or printing something in the console, 
you may not want a return value to be printed as well. In that case, the value should be invisibly returned.

Functions can only return one value. If you want to return multiple things, then you can store them all in a list.

If users want to have the list items as separate variables, 
they can assign each list element to its own variable using zeallot's multi-assignment operator, %<-%.
eg : c(mdl,cff,obs) %<-% groom_model(model)

Sometimes you want the return multiple things from a function, but you want the result to have a particular class 
(for example, a data frame or a numeric vector),so returning a list isn't appropriate. 
This is common when you have a result plus metadata about the result.
In that case, you can store the metadata in attributes. 

attr(object, "attribute_name") <- attribute_value

search() function shows all parent environments from global environment.

Environments are used to store other variables. Mostly, you can think of them as lists, 
but there's an important extra property that is relevant to writing functions. 

Every environment has a parent environment (except the empty environment, at the root of the environment tree). 
This determines which variables R know about at different places in your code.

If R cannot find a variable in the current environment, 
it will look in the parent environment, then the grandparent environment, and so on until it finds it.

R searches for variables in all the parent environments, unless you explicitly tell it not to.

eg : # Does population exist in rsa_env, ignoring inheritance?
      exists("population", envir = rsa_env, inherit = FALSE)

A function can look for variables outside its environment but the reverse isn't true.
You can't look inside functions environment from outside.













