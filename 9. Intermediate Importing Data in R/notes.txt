
R core team packages use . in function names while hadley packages use _ .

which R functions you can use to access and manipulate the database is specified in another R package called DBI.
In technical terms DBI is interface and RMySQL is implementation.
communication between R and relational database management systems.

you need different packages depending on the database you want to connect to. 
All of these packages do this in a uniform way, as specified in the DBI package.

Loading only DBI package is enough.
Creating connection to remote MySQL database : dbConnect() creates a connection between your R session and a SQL database
con <- dbConnect(RMySQL::MySQL(), dbname = "company",
host = "courses.com", port=3306, user="student", password="datacamp")

The first argument has to be a DBIdriver object, that specifies how connections are made 
and how data is mapped between R and the database. 
1st argument specifies the driver that we will use to connect to MySQL database.
MySQL function from RMySQL package simply constructs driver for us that dbConnect can use.

con is DBI connection object. We will pass this obj to other functions we use to interact with database.

dbListTables(con) lists all tables in a database.
dbReadTable(con, "employees")
It is polite to explicitly disconnect database after we are done. we can do this using dbDisconnect(con)


dbGetQuery() is used to only import the data you actually need into R..

res <- dbSendQuery(con,"query")
dbFetch(res)
dbClearResult(res)

Above 3 line code is behind the scenes approach of dbGetQuery().
Sending the specified query with dbSendQuery();
Fetching the result of executing the query on the database with dbFetch();
Clearing the result with dbClearResult().

dbFetch query calls allow to specify maximum no of records to retrieve per fetch.
You can do this by specifying the n argument inside dbFetch().
This can be useful when we want to load lots of data but want to do this chunk by chunk.


R sees URL , does GET request and reads in the CSV file.
HTTPS support since R version 3.2.2

utils and readr package can handle flat files on web.
readxl does not know how to handle excel files that are stored on the web.

We can use download.file() by specifying url of xls file on web as 1st argument and destination path of file as 2nd argument. 
download.file() is from utils package.
It performed GET request to URL specified and stored contents of response to location specified as destination.
Now we can use read_excel(). 

gdata can handle .xls files that are on the internet.

You can't directly use a URL string inside load() to load remote RData files. 
You should use url() or download the file first using download.file().

httr provides a convenient function, GET() to execute this GET request. 
The result is a response object, that provides easy access to the status code, content-type and, of course, the actual content.
You can extract the content from the request using the content() function. 
At the time of writing, there are three ways to retrieve this content: as a raw object, as a character vector, or an R object, such as a list.
If you don't tell content() how to retrieve the content through the as argument, it'll try its best to figure out which type is most appropriate based on the content-type.


jsonlite package is used to convert json to R data structure and vice versa.
It supports all use cases.
fromJSON() can convert character strings that represent JSON data into a nicely structured R list.
fromJSON() also works if you pass a URL as a character string or the path to a local file that contains JSON data.

toJSON() to convert R data to a JSON format. 

# Mini
{"a":1,"b":2,"c":{"x":5,"y":6}}

# Pretty
{
  "a": 1,
  "b": 2,
  "c": {
    "x": 5,
    "y": 6
  }
}

the standard form that toJSON() returns, is the minified version, as it is more concise. 
setting the pretty argument inside toJSON() to TRUE will help.

If you already have a JSON string, you can use prettify() or minify() to make the JSON pretty or as concise as possible.


Statistical software packages :

SAS - Statistical Analysis Software used in Business Analytics, Biostatistics, Medical Sciences. file extensions : .sas7bdat .sas7bcat
STATA - STAtistics and daTA used for Economists. file extensions : .dta
SPSS - Statistical Package for Social Sciences used in Social Sciences. file extensions : .sav .por

Packages that can import data from these software environments : haven and foreign

haven : hadley wickham
        easy and fast compared to foreign
        SAS,STATA,SPSS
        wrapping around ReadStat C library

read_sas() single argument path to file
STATA 13 and STATA 14  read_stata(),read_dta() single argument path to file

When inspecting the result of the read_dta() call, 
you will notice that one column will be imported as a labelled vector, an R equivalent for the common data structure in other statistical environments. 
In order to effectively continue working on the data in R, it's best to change this data into a standard R class. 
To convert a variable of the class labelled to a factor, you'll need haven's as_factor() function.
eg : sugar$Date <- as.Date(as_factor(sugar$Date))


SPSS read_spss() read_sav() read_por() single argument path to file

In fact, you can even pass a URL; haven will then automatically download the file for you before importing it.



foreign : R core team
          supports many data formats like SAS,STATA,SPSS,Systat,Weka
          less consistent
          very comprehensive
          export data to various formats

can not import files like .sas7bdat
only import SAS libraries .xport
STATA 5 to 12

read.dta()
The arguments you will use most often are convert.dates, convert.factors, missing.type and convert.underscore.

To get a data frame, make sure to set to.data.frame = TRUE inside read.spss().
use.value.labels. It specifies whether variables with value labels should be converted into R factors with levels that are named accordingly. 
The argument is TRUE by default which means that so called labelled variables inside SPSS are converted to factors inside R.









